import { beforeEach, describe, expect, jest, test } from '@jest/globals';

// Mock service
jest.unstable_mockModule('../../../../src/apis/clip/service/deleteClip.js', () => ({
  deleteClip: jest.fn(),
}));

// Mock response formatter
jest.unstable_mockModule('../../../../src/utils/responseFormatter.js', () => ({
  createSuccessResponse: jest.fn(),
  createErrorResponse: jest.fn(),
}));

const { deleteClip } = await import('../../../../src/apis/clip/service/deleteClip.js');
const { createSuccessResponse, createErrorResponse } = await import('../../../../src/utils/responseFormatter.js');
const { handleDeleteClip } = await import('../../../../src/apis/clip/controller/handleDeleteClip.js');
const { CustomError } = await import('../../../../src/utils/errors.js');

describe('handleDeleteClip Controller ÌÖåÏä§Ìä∏', () => {
  let mockReq, mockRes;
  const mockUserId = 'test-user-123';

  beforeEach(() => {
    jest.clearAllMocks();

    mockReq = {
      params: { clipId: '1' },
      user: { id: mockUserId }, // Ïù∏Ï¶ù ÎØ∏Îì§Ïõ®Ïñ¥ÏóêÏÑú Ï†úÍ≥µÌïòÎäî ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥
    };

    mockRes = {
      status: jest.fn().mockReturnThis(),
      json: jest.fn(),
    };
  });

  describe('‚úÖ ÏÑ±Í≥µ ÏºÄÏù¥Ïä§', () => {
    test('ÌÅ¥Î¶Ω ÏÇ≠Ï†úÎ•º ÏÑ±Í≥µÏ†ÅÏúºÎ°ú Ï≤òÎ¶¨ÌïúÎã§ (ÏÜåÏú†Ïûê Í≤ÄÏ¶ù Ìè¨Ìï®)', async () => {
      const mockServiceResult = {
        message: 'ÌÅ¥Î¶ΩÏù¥ ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÏÇ≠Ï†úÎêòÏóàÏäµÎãàÎã§.',
        deletedClipId: 1,
        deletedClipTitle: 'ÌÖåÏä§Ìä∏ ÌÅ¥Î¶Ω',
      };
      const mockSuccessResponse = { status: 'SUCCESS', data: mockServiceResult };

      deleteClip.mockResolvedValue(mockServiceResult);
      createSuccessResponse.mockReturnValue(mockSuccessResponse);

      await handleDeleteClip(mockReq, mockRes);

      expect(deleteClip).toHaveBeenCalledWith('1', mockUserId);
      expect(createSuccessResponse).toHaveBeenCalledWith(mockServiceResult);
      expect(mockRes.status).toHaveBeenCalledWith(200);
      expect(mockRes.json).toHaveBeenCalledWith(mockSuccessResponse);
    });

    test('Îã§ÏñëÌïú clipId ÌòïÌÉúÎ•º Ïò¨Î∞îÎ•¥Í≤å Ï†ÑÎã¨ÌïúÎã§', async () => {
      mockReq.params.clipId = '42';
      const mockServiceResult = { message: 'ÏÇ≠Ï†ú ÏôÑÎ£å', deletedClipId: 42, deletedClipTitle: 'test' };

      deleteClip.mockResolvedValue(mockServiceResult);
      createSuccessResponse.mockReturnValue({ status: 'SUCCESS', data: mockServiceResult });

      await handleDeleteClip(mockReq, mockRes);

      expect(deleteClip).toHaveBeenCalledWith('42', mockUserId);
    });
  });

  describe('‚ùå ÏóêÎü¨ ÏºÄÏù¥Ïä§', () => {
    test('ÏÇ¨Ïö©Ïûê Ïù∏Ï¶ù Ï†ïÎ≥¥Í∞Ä ÏóÜÏúºÎ©¥ 401 ÏóêÎü¨Î•º Î∞òÌôòÌïúÎã§', async () => {
      mockReq.user = null; // Ïù∏Ï¶ù Ï†ïÎ≥¥ ÏóÜÏùå
      const mockErrorResponse = { status: 'ERROR', errorCode: 'UNAUTHORIZED' };
      createErrorResponse.mockReturnValue(mockErrorResponse);

      await handleDeleteClip(mockReq, mockRes);

      expect(createErrorResponse).toHaveBeenCalledWith('UNAUTHORIZED', 'Ïù∏Ï¶ùÎêòÏßÄ ÏïäÏùÄ ÏÇ¨Ïö©ÏûêÏûÖÎãàÎã§.');
      expect(mockRes.status).toHaveBeenCalledWith(401);
      expect(mockRes.json).toHaveBeenCalledWith(mockErrorResponse);
      expect(deleteClip).not.toHaveBeenCalled();
    });

    test('ÏÇ¨Ïö©Ïûê IDÍ∞Ä ÏóÜÏúºÎ©¥ 401 ÏóêÎü¨Î•º Î∞òÌôòÌïúÎã§', async () => {
      mockReq.user = { id: undefined }; // ID ÏóÜÏùå
      const mockErrorResponse = { status: 'ERROR', errorCode: 'UNAUTHORIZED' };
      createErrorResponse.mockReturnValue(mockErrorResponse);

      await handleDeleteClip(mockReq, mockRes);

      expect(createErrorResponse).toHaveBeenCalledWith('UNAUTHORIZED', 'Ïù∏Ï¶ùÎêòÏßÄ ÏïäÏùÄ ÏÇ¨Ïö©ÏûêÏûÖÎãàÎã§.');
      expect(mockRes.status).toHaveBeenCalledWith(401);
      expect(mockRes.json).toHaveBeenCalledWith(mockErrorResponse);
    });

    test('ÏÑúÎπÑÏä§ÏóêÏÑú 400 ÏóêÎü¨ Î∞úÏÉù Ïãú 400 ÏÉÅÌÉúÏΩîÎìúÎ°ú ÏùëÎãµÌïúÎã§', async () => {
      const mockError = new CustomError('INVALID_CLIP_ID', 'Ïú†Ìö®ÌïòÏßÄ ÏïäÏùÄ ÌÅ¥Î¶Ω IDÏûÖÎãàÎã§.', 400);
      const mockErrorResponse = { status: 'ERROR', errorCode: 'INVALID_CLIP_ID' };

      deleteClip.mockRejectedValue(mockError);
      createErrorResponse.mockReturnValue(mockErrorResponse);

      await handleDeleteClip(mockReq, mockRes);

      expect(createErrorResponse).toHaveBeenCalledWith('INVALID_CLIP_ID', 'Ïú†Ìö®ÌïòÏßÄ ÏïäÏùÄ ÌÅ¥Î¶Ω IDÏûÖÎãàÎã§.');
      expect(mockRes.status).toHaveBeenCalledWith(400);
      expect(mockRes.json).toHaveBeenCalledWith(mockErrorResponse);
    });

    test('ÏÑúÎπÑÏä§ÏóêÏÑú 404 ÏóêÎü¨ Î∞úÏÉù Ïãú 404 ÏÉÅÌÉúÏΩîÎìúÎ°ú ÏùëÎãµÌïúÎã§', async () => {
      const mockError = new CustomError('CLIP_NOT_FOUND', 'ÏÇ≠Ï†úÌï† ÌÅ¥Î¶ΩÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.', 404);
      const mockErrorResponse = { status: 'ERROR', errorCode: 'CLIP_NOT_FOUND' };

      deleteClip.mockRejectedValue(mockError);
      createErrorResponse.mockReturnValue(mockErrorResponse);

      await handleDeleteClip(mockReq, mockRes);

      expect(createErrorResponse).toHaveBeenCalledWith('CLIP_NOT_FOUND', 'ÏÇ≠Ï†úÌï† ÌÅ¥Î¶ΩÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.');
      expect(mockRes.status).toHaveBeenCalledWith(404);
      expect(mockRes.json).toHaveBeenCalledWith(mockErrorResponse);
    });

    test('ÏòàÏÉÅÏπò Î™ªÌïú ÏóêÎü¨ Î∞úÏÉù Ïãú 500 ÏÉÅÌÉúÏΩîÎìúÎ°ú ÏùëÎãµÌïúÎã§', async () => {
      const mockError = new Error('ÏòàÏÉÅÏπò Î™ªÌïú ÏóêÎü¨');
      const mockErrorResponse = { status: 'ERROR', errorCode: 'Error' };

      deleteClip.mockRejectedValue(mockError);
      createErrorResponse.mockReturnValue(mockErrorResponse);

      await handleDeleteClip(mockReq, mockRes);

      expect(createErrorResponse).toHaveBeenCalledWith('Error', 'ÏòàÏÉÅÏπò Î™ªÌïú ÏóêÎü¨');
      expect(mockRes.status).toHaveBeenCalledWith(500);
      expect(mockRes.json).toHaveBeenCalledWith(mockErrorResponse);
    });
  });

  describe('üß™ HTTP ÏöîÏ≤≠/ÏùëÎãµ Ï≤òÎ¶¨', () => {
    test('req.paramsÏóêÏÑú clipIdÎ•º Ïò¨Î∞îÎ•¥Í≤å Ï∂îÏ∂úÌïúÎã§', async () => {
      mockReq.params.clipId = '999';
      const mockServiceResult = { message: 'ÏÇ≠Ï†úÎê®', deletedClipId: 999 };

      deleteClip.mockResolvedValue(mockServiceResult);
      createSuccessResponse.mockReturnValue({ status: 'SUCCESS' });

      await handleDeleteClip(mockReq, mockRes);

      expect(deleteClip).toHaveBeenCalledWith('999', mockUserId);
    });

    test('req.userÏóêÏÑú ÏÇ¨Ïö©Ïûê IDÎ•º Ïò¨Î∞îÎ•¥Í≤å Ï∂îÏ∂úÌïúÎã§', async () => {
      const differentUserId = 'different-user-456';
      mockReq.user.id = differentUserId;

      const mockServiceResult = { message: 'ÏÇ≠Ï†úÎê®' };
      deleteClip.mockResolvedValue(mockServiceResult);
      createSuccessResponse.mockReturnValue({ status: 'SUCCESS' });

      await handleDeleteClip(mockReq, mockRes);

      expect(deleteClip).toHaveBeenCalledWith('1', differentUserId);
    });
  });
});
